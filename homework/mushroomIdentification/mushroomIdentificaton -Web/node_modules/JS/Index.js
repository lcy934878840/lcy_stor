    let uname= decodeURI(document.URL)
    uname=uname.slice(uname.indexOf("=")+1).replace(/[^0-9]/g, "")
    console.log(uname)

    const userMenu = document.querySelector('.userMenu')
    const lisMenu = document.querySelectorAll('.wrapper .title .userMenu li')
    const displayArea =document.querySelector('.preview')

    let imgUpload = document.querySelectorAll('.upload')

    /*摄像头*/
    let mediaStreamTrack=null; // 视频对象(全局)
    let video ;
    let takePicture=document.querySelector('.takePhoto')
    let closeCamera=document.querySelector('.closeMedia')

    let previewData='' //定义一个存储base64的全局变量
    let photoName=''
    /*视频变量*/
    const videoElement = document.querySelector('#video-upload');
    const videoBnt = document.querySelector('.videoBnt')
    /*悬浮窗*/
    lisMenu.forEach((li, index) => {
    userMenu.addEventListener('mouseover', () => {
        let active = 'active'+(index+1)
        li.classList.add(active)
    })
    userMenu.addEventListener('mouseleave', () => {
    let active = 'active'+(index+1)
    setTimeout(function (){
    li.classList.remove(active)
},3000)
}
    )
})
    /*图片添加*/
    function appendImg(base64){
    const videoElement = displayArea.querySelector('video');
    console.log(videoElement)
    if (videoElement) {
    console.log('已有视频')
    displayArea.removeChild(videoElement);
}
    // 添加图片到展示框中
    const imgElement = document.createElement('img');
    //判断先前是否有图片
    const preview = document.getElementById('previewImg');
    if(preview){
    preview.src = base64
}
    else {
    imgElement.id = 'previewImg'
    imgElement.style.width='100%'
    imgElement.style.height='100%'
    imgElement.src = base64
    displayArea.insertBefore(imgElement,displayArea.children[0])
}
}
    /*图片上传*/
    function display(Img){
    if (!Img.value) {
    console.log('Img.value:'+Img.value)
    info.innerHTML = '没有选择文件';
    return;
}
    let file = Img.files[0];
    photoName=Img.files[0]['name']
    console.log(file.type)
    let size = file.size;
    if (size >= 1024 * 1024) {
    alert('文件大小超出限制');

    info.innerHTML = '文件大小超出限制';
    return false;
}
    // 获取File信息:

    if (!['image/jpeg', 'image/png', 'image/gif'].includes(file.type)) {
    alert('不是有效的图片文件!');
    return;
}
    // 读取文件:
    let reader = new FileReader();
    reader.onload = function(e) {
    previewData = reader.result
    console.log('previewData:',previewData)
    appendImg(previewData)

    /*previewImg = e.target.result;
    console.log(e.target.result, 'e.target.result')
    console.log(reader.result,'reader.result')
    preview.src = previewImg*/
};
    // 以DataURL的形式读取文件:
    reader.readAsDataURL(file);
}
    imgUpload.forEach((img, index) => {
    img.addEventListener('change',function (){
        console.log('change')
        display(this)
    })
})
    /*摄像头截图*/
    function openMedia() {

    let constraints = {
    video: { width: 382, height:305 },
    audio: false
};
    //获得video摄像头
    video = document.getElementById('video');

    let promise = navigator.mediaDevices.getUserMedia(constraints);
    promise.then((mediaStream) => {
    // mediaStreamTrack = typeof mediaStream.stop === 'function' ? mediaStream : mediaStream.getTracks()[1];
    mediaStreamTrack=mediaStream.getVideoTracks()
    video.srcObject = mediaStream;
    video.play();
    takePicture.style.visibility='visible'
    closeCamera.style.visibility='visible'
    /*button.style.opacity=0.8*/
});
}
    function takePhoto() {
    let canvas = document.createElement('canvas');
    canvas.width = 382;
    canvas.height = 305;
    console.log(video.width)
    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
    previewData = canvas.toDataURL()
    console.log('previewData:',previewData)
    appendImg(previewData)
}
    function closeMedia() {
    takePicture.style.visibility='hidden'
    closeCamera.style.visibility='hidden'

    let stream = document.getElementById('video').srcObject;
    let tracks = stream.getTracks();

    tracks.forEach(function(track) {

    track.stop();
});
    document.getElementById('video').srcObject = null;
}
    /*上传视频*/
    videoBnt.addEventListener('change',(e)=>{
    const file = e.target.files[0];
    console.log('videoFile:',file)
    const reader = new FileReader();
    reader.onload = () => {
    // 如果展示框中有图片，则先清除图片
    const imgElement = displayArea.querySelector('img');
    if (imgElement) {
    displayArea.removeChild(imgElement);
}
    // 添加视频到展示框中
    const videoElement = document.createElement('video');
    videoElement.id = 'video-upload'
    videoElement.src = reader.result;
    videoElement.autoplay = true
    videoElement.loop = true
    videoElement.style.width = videoElement.style.height = '100%'
    videoElement.style.position = 'absolute'
    videoElement.style.left = '0'

    displayArea.insertBefore(videoElement,displayArea.children[0])
    console.log('放了一个视频')
    previewData=reader.result
};
    reader.readAsDataURL(file);
});





    /*将base64传回后端*/
    document.querySelector('.predictBnt').addEventListener('click',function (){
    //获取节点
    const predictFrame = document.querySelector('.predict')
    const predictPhoto = document.getElementById('predictPhoto')
    const predictVideo = document.getElementById('predictVideo')
    if(predictVideo) predictVideo.src = ''
    if(predictPhoto) predictPhoto.src = ''
    if (previewData){
    //显示图标
    document.querySelector('.predict .fa-spinner').style.display = 'block'
    $.ajax({
    url:"./Rev",
    type: "POST",
    contentType: "application/json;charset=utf-8",
    data: JSON.stringify({"preData":previewData,"time":new Date().toLocaleString(),'uname':uname}),
    success:function(response){
    //关闭图标
    document.querySelector('.predict .fa-spinner').style.display = 'none'
    let reData = JSON.parse(response)['reData']
    //创建记录结点
    const li = document.createElement('li')
    if (reData.indexOf('image') !== -1){
    //展示图片，判断是否已有视频，有则移除
    if (predictVideo){
    predictFrame.removeChild(predictVideo)
}
    //判断是否已经存在照片
    if (predictPhoto){
    predictPhoto.src = reData
}else {
    const predictImage = document.createElement('img')
    predictImage.id = 'predictPhoto'
    predictImage.src = reData
    predictFrame.insertBefore(predictImage,predictFrame.children[0])
}
    //增加记录
    const mushroomMeg = JSON.parse(response)['mushroomMeg']
    li.innerHTML = `<input type="checkbox">
                        <div class="title">
                            <i class="fa fa-toggle-right"></i>
                            <p>记录</p>
                            <span>${new Date().toLocaleString()}</span>
                        </div>
                        <div class="describe">
                            <img src="${reData}">
                            <p>名称：${mushroomMeg['name']}</p>
                            <p>置信度：${JSON.parse(response)['confidence']}</p>
                            <p>毒性：${mushroomMeg['edible']}</p>
                            <p>特征：${mushroomMeg['feature']}</p>
                            <p>描述：${mushroomMeg['account']}</p>
                            <button onclick="download(this)" class="download">下载图片</button>
                        </div>`
    document.querySelector('.img-item').appendChild(li)
    checkBoxes = document.querySelectorAll('.history-nav li input')
}
    else {
    //把视频转为blob
    const bstr = window.atob(reData)
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
}
    const videoObj =new File([u8arr], 'videoFile', { type: 'video/webm' })
    const blobPath = URL.createObjectURL(videoObj)
    //展示图片，判断是否已有视频，有则移除
    if (predictPhoto){
    predictFrame.removeChild(predictPhoto)
}
    //判断是否已经存在视频
    if (predictVideo){
    predictVideo.src = blobPath
}else {
    const predictVideo = document.createElement('video')
    predictVideo.id = 'predictVideo'
    predictVideo.src = blobPath
    predictVideo.controls = true
    predictVideo.autoplay = true
    predictFrame.insertBefore(predictVideo,predictFrame.children[0])
}
    li.innerHTML = `<video src="${blobPath}" controls></video>
                        <p>${new Date().toLocaleString()}</p>`
    document.querySelector('.video-item').appendChild(li)
}

},
});
}
    else alert('请上传文件！')
})
    //登录之后就加载数据
    window.onload = function (){
    console.log(uname)
    $.ajax({
    url:"./readData",
    type: "POST",
    contentType: "application/json;charset=utf-8",
    data: JSON.stringify({"loginState":true,"uname":uname}),
    success:function(response){
    let Data=JSON.parse(response)['data']
    console.log(Data)
    if (Data){
    for(let i=0;i<Data.length;i++){
    let obj = Data[i]
    console.log(obj)
    const li = document.createElement('li')
    if (obj['datatype'].indexOf('image') !== -1){
    li.innerHTML = `<input type="checkbox">
                        <div class="title">
                            <i class="fa fa-toggle-right"></i>
                            <p>记录</p>
                            <span>${obj['datatime']}</span>
                        </div>
                        <div class="describe">
                            <img src="${obj['datacontent']}" alt="">
                            <p>名称：${obj['mushroomclass']}</p>
                            <p>置信度：${obj['confidence']}</p>
                            <p>毒性：${obj['edible']}</p>
                            <p>特征：${obj['feature']}</p>
                            <p>描述：${obj['description']}</p>
                            <button onclick="download(this)" class="download">下载图片</button>
                        </div>`
    document.querySelector('.img-item').appendChild(li)
    checkBoxes = document.querySelectorAll('.history-nav li input')
}
    else {
    const videoBase64 = window.atob(obj['datacontent'])
    let n = videoBase64.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
    u8arr[n] = videoBase64.charCodeAt(n);
}
    const videoObj =new File([u8arr], 'videoFile', { type: 'video/webm' })
    li.innerHTML = `<video src="${URL.createObjectURL(videoObj)}" controls></video>
                        <p>${obj['datatime']}</p>`
    document.querySelector('.video-item').appendChild(li)
}
}
}
}
});
}

    //下载
    function download(DOM){
    const src = DOM.parentNode.querySelector('img').src
    const a = document.createElement('a'); // 创建一个a节点插入的document
    const event = new MouseEvent('click') // 模拟鼠标click点击事件
    a.download = 'img' // 设置a节点的download属性值
    a.href = src // 将图片的src赋值给a节点的href
    a.dispatchEvent(event)
}


    //tab切换
    const slider = document.querySelector('.slider')
    const tabBnts = document.querySelectorAll('.tab-bnt button')
    const historyNav =document.querySelector('.history-nav')
    tabBnts.forEach((bnt, index) => {
    bnt.addEventListener('click', () => {
        console.log(index)
        for (let i=0;i<tabBnts.length;i++) {
            historyNav.children[i].style.display = 'none'
            slider.style.left = (index * 115).toString() +'px'
        }
        historyNav.children[index].style.display = 'block'
    });
});
    console.log(tabBnts.length)

    //收缩栏
    const showDescribe= document.querySelector('.history-record .history-nav .record-nav ul')
    showDescribe.addEventListener('click',function (e){
    if (e.target.tagName === 'DIV'){
    let visible = e.target.nextElementSibling.style.display
    const toggleRight = 'fa-toggle-right'
    const toggleDwon = 'fa-toggle-down'
    const iClass = e.target.parentNode.querySelector('i')

    e.target.nextElementSibling.style.display=visible === 'none'?'block':'none'

    if (visible === 'none'){
    e.target.nextElementSibling.style.display='block'
    iClass.classList.remove(toggleRight)
    iClass.classList.add(toggleDwon)
}
    else {
    e.target.nextElementSibling.style.display='none'
    iClass.classList.remove(toggleDwon)
    iClass.classList.add(toggleRight)
}
}

})


    //功能操作符
    let checkAllBnt = document.querySelector('.checkAll') //全选按钮
    let deleteItemBnt = document.querySelector('.deleteItem')//删除按钮
    //所有li节点
    let listItems
    //获取所有单选框
    let checkBoxes = document.querySelectorAll('.history-nav li input')
    console.log(checkBoxes)
    //选中状态
    let checked = false
    //显示选中框
    let checkboxDisplay = false
    //已确认个数
    let checkedLength

    function selectDisplay(){
    listItems =document.querySelectorAll('.history-nav .img-item li')
    listItems.forEach((li) => {
    let checkShow = li.querySelector('input').style.display
    li.querySelector('input').style.display = checkShow === 'none'?'block':'none'
    if(checkShow==='none'){
    li.querySelector('input').style.display = 'block'
    checkboxDisplay = true
    checkAllBnt.disabled=false
    checkAllBnt.classList.add('selectActive')

}
    else {
    li.querySelector('input').style.display = 'none'
    checkboxDisplay = false
    checkAllBnt.disabled = true
    checkAllBnt.classList.remove('selectActive')
}

});
}
    function selectCheckedAll(){
    if (checked === false ){
    for (let i=0;i<listItems.length;i++){
    listItems[i].querySelector('input').checked = true
}
    //设置选中状态和单选框选中个数
    checked = true
    checkedLength = listItems.length
    console.log('已选中的单选框：',checkedLength)
    //激活删除按钮
    deleteItemBnt.classList.add('selectActive')
    deleteItemBnt.disabled = false
    deleteItemBnt.style.color = 'red'
}
    else {
    for (let i=0;i<listItems.length;i++){
    listItems[i].querySelector('input').checked = false
}
    checked = false
    //设置删除不可选
    deleteItemBnt.classList.remove('selectActive')
    deleteItemBnt.disabled = true
    deleteItemBnt.style.color = ''
}
}

    //设置定时器，实时更新数据
    setInterval(function a(){
    checkBoxes.forEach((checkBox) => {
        checkBox.addEventListener('click',function (){
            //已确认个数
            checkedLength =document.querySelectorAll('.history-nav li input:checked').length
            console.log(this.checked)
            if (this.checked === true){
                deleteItemBnt.classList.add('selectActive')
                deleteItemBnt.disabled = false
                deleteItemBnt.style.color = 'red'
            }
            else {
                if (checkedLength === 0){
                    deleteItemBnt.classList.remove('selectActive')
                    deleteItemBnt.disabled = true
                    deleteItemBnt.style.color = ''
                }
                //设置删除不可选
            }
        })
    })
},1000)
    //删除选中子项
    function selectDelete() {
    let deleteDateList = []
    if (checkedLength > 0){
    if (confirm('您确定要删除这条记录吗')) {
    for (let i = 0; i < checkBoxes.length; i++) {
    if (checkBoxes[i].checked) {
    //移除子项
    const checkedLi = checkBoxes[i].parentNode
    checkedLi.remove()
    checkedLength = 0
    //从数据库删数据
    const time = checkedLi.querySelector('.title span').innerHTML
    console.log('time:',time)
    const dataid = uname+time.replace(/[- :/]/g, "");
    console.log('dataid:',dataid)
    deleteDateList.push(dataid)
}
}
    $.ajax({
    url: "./deleteData",
    type: "POST",
    contentType: "application/json;charset=utf-8",
    data: JSON.stringify({"uname": uname,"deleteDateList":deleteDateList}),
    success: function (response) {
    const reply = JSON.parse(response)['reply']
    alert(reply)
}
})
}
}
    else alert('请选择要删除的记录！')
}

    //视频处理
    const videoItems = document.querySelectorAll('.history-record .history-nav .record-nav .video-item li video')
    videoItems.forEach((videoItem,index)=>{
    videoItem.addEventListener('mouseenter',function (){
        videoItem.controls = true
        videoItem.parentElement.style.transform = 'scale(1.1)'

    });
    videoItem.addEventListener('mouseleave',function (){
    this.controls = false
    videoItem.parentElement.style.transform = ''
});
})

    /*聊天界面*/
    let chatNav = document.querySelector('.chatNav')
    let chatNavDisplay = chatNav.style.display
    function ChatDisplay(){
    chatNavDisplay === 'none' ?document.querySelector('.chatNav').style.display = "block":alert('请勿重复操作');
    console.log(chatNavDisplay)
}
    function CloseChat(){
    document.querySelector('.chatNav').style.display = 'none'
}
    function AppendQuestions(){
    let userInput= document.querySelector('.chatNav-subQues input')
    let userQuestion = document.querySelector('.chatNav-body ul')
    const questions = userInput.value.trim()
    const li=document.createElement('li')
    if (userInput.value.trim()){
    li.innerHTML=`${userInput.value}`
    li.classList.add("userque")
    userQuestion.appendChild(li)
    userInput.value=''
    /*自滚动*/
    userQuestion.children.length === 2 ? console.log('the first child'):document.querySelector('.chatNav .chatNav-body').scroll({ top: li.offsetTop, left: 0, behavior: 'smooth' })
    $.ajax({
    url:"./questionsSubmit",
    type: "POST",
    contentType: "application/json;charset=utf-8",
    data: JSON.stringify({"questions":questions,"time":new Date().toLocaleString()}),
    success:function(response){
    let answer=JSON.parse(response)['answer']
    AppendReply(answer)
},
});
}
    else alert('发送内容不能为空')

}
    /*添加回复*/
    function AppendReply(answer){
    let userQuestion = document.querySelector('.chatNav-body ul')
    const li=document.createElement('li')
    li.innerHTML=`${answer}`
    userQuestion.appendChild(li)
}

    /*滚动事件*/
    function ScrollHis(){
    window.scroll({ top: document.querySelector('.history-record').offsetTop, left: 0, behavior: 'smooth' })
}
    //退出
    function Exit(){
    //登陆记录清除
    uname = ''
    //跳转登陆页面
    window.location.href = '/'
}
